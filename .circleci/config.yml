# Versión de la configuración de CircleCI. Usamos la 2.1.
version: 2.1

# Sección de Orbs:
orbs:
  node: circleci/node@5.0.0 # Orb oficial de Node.js

# Sección de Jobs:
jobs:
  # Job 1: build_and_cache_dependencies (Sin cambios)
  build_and_cache_dependencies:
    executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - node/install-packages:
          pkg-manager: npm
      - save_cache:
          paths:
            - ~/project/node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules

  # Job 2: run_api_tests (Sin cambios)
  run_api_tests:
    executor: node/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Ejecutar Pruebas de la API
          command: npm test # Asegúrate de que este script ejecuta tus pruebas reales

  # Job 3: deploy_to_render (¡Nuevo Job para el despliegue!)
  deploy_to_render:
    docker:
      - image: cimg/base:stable # Usamos una imagen base que tenga curl para hacer la petición HTTP
    steps:
      - run:
          name: Activar Despliegue en Render
          command: |
            # Asegúrate de que la variable de entorno RENDER_DEPLOY_HOOK_URL esté configurada en CircleCI
            # Esta URL es la que obtuviste de Render.
            if [ -z "$RENDER_DEPLOY_HOOK_URL" ]; then
              echo "Error: RENDER_DEPLOY_HOOK_URL no está configurada como variable de entorno."
              exit 1
            fi
            
            echo "Activando despliegue en Render..."
            # Hacemos una petición POST a la URL del Deploy Hook de Render
            # Esto le dice a Render que inicie un nuevo despliegue de la rama configurada.
            curl -X POST $RENDER_DEPLOY_HOOK_URL
            echo "Petición de despliegue a Render enviada."

# Sección de Workflows:
workflows:
  build_test_and_deploy_flow: # Renombramos el workflow para reflejar el despliegue
    jobs:
      - build_and_cache_dependencies

      - run_api_tests:
          requires:
            - build_and_cache_dependencies

      - deploy_to_render: # Este job se ejecutará después de las pruebas
          requires:
            - run_api_tests # Solo despliega si las pruebas de la API pasaron
          filters:
            branches:
              only: main # Solo despliega cuando se hace un push a la rama 'main'
